// 백준 10870번 피보나치 수 5

// input: N = 3^k  (1 <= k < 8)

/*
* 바둑판이라고 생각해보자, 행은 i, 열은 j이다.
* n = 3일 때, (1, 1)이 비어 있다.
* n = 27일 때, j가 0~2인 경우를 생각해보자.
* 빈칸이 들어가 있는 곳의 가로 좌표는 1, 4, 7, 10, 13, 16, 19, 22, 25이다.
* 즉 (i % 3) == 1인 경우이다.
*
* i가 0~2인 경우를 생각해보자
* 빈칸이 들어가 있는 곳의 세로 좌표도 (j % 3) == 1인 경우이다.
* 즉 (i % 3) == 1 && (j % 3) == 1인 좌표에서 빈칸이 발생한다.
*
* 그럼 가운데 크게 비는 곳은 어떻게 할까?
* n = 9일 때를 생각해보자.
* 가운데 비는 곳의 좌표는 (3, 3) (3, 4) (3, 5) (4, 3) (4, 4) (4, 5) (5, 3) (5, 4) (5, 5)이다.
* 이 때의 좌표들을 3으로 나누면 (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1) (1, 1)
* 즉 (i / 3 % 3) == 1 && (j / 3 % 3) == 1인 좌표에서 빈칸이 발생한다.
* 
* 그럼 n = 3일 때는?
* (i / 1 % 3) == 1 && (j / 1 % 3) == 1일 때이다.
* 
* 즉, (i / n % 3) == 1 && (j / n % 3) == 1일 때 " "이 들어가게 된다.
* n이 아니라 n / 3이라고 할 수도 있지만 어차피 n / 3일 때도 빈칸이므로 상관 없다.
* 
* 빈칸을 먼저 검사한다.
* 만약 빈칸이 아니라면
* 해당 레벨보다 낮은 레벨에서 빈칸일 수 있으므로 n / 3로 재귀하여 검사한다.
* 하여 가장 작은 레벨인 n = 3일 때의 *를 출력한다.
*/

#include <iostream>
using namespace std;

void star(int i, int j, int n) {
	if (i / n % 3 == 1 && j / n % 3 == 1) {
		cout << " ";
	}
	else if (n / 3 == 0) {
		cout << "*";
	}
	else {
		star(i, j, n / 3);
	}
}

int main() {
	int n;
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			star(i, j, n);
		}
		cout << '\n';
	}
}

