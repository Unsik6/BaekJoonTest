// 백준 11653번 소인수분해

// Input: N = 1000이하의 양의 정수

// 크게 어렵지 않다.
// 다만, 소수일 경우를 신경써줘야한다.
// for문을 가장 적게 돌리기 위해 i*i <=N의 범위만 돌리기 때문에
// 소수인 경우, 자기 자신을 출력하지 않기 때문이다.

// for 범위가 i*i <= N인 이유
// 제곱근까지만 찾는 이유는 N이 소수가 아닐 때 N = a * b(a는 소수, b > 1)이고,
// 2부터 제곱근 이하까지 소수가 없다면 N = a * b는 성립할 수 없기 때문이다.
// 왜냐하면 N을 36이라 할 때, 1*36, 2*18, 3*12, 4*9, 6*6, 9*4, 12*3, 18*2, 36*1
// 이런식으로 약수의 곱으로 나타낼 때 중간(제곱근)을 기점으로
// 이미 등장한 약수가 다시 반복되기 때문에, 제곱근 이하의 소수가 존재하지 않으면
// 그 뒷부분도 존재하지 않으므로 소수이다.

#include <iostream>

int main()
{
	int N;
	std::cin >> N;
	for (int i = 2; i*i <= N; i++)
	{
		while (!(N % i))
		{
			N /= i;
			std::cout << i << std::endl;
		}
		if (N == 1) break;
	}
	// 소수 처리
	if (N > 1) std::cout << N;
	return 0;
}